AWSTemplateFormatVersion: '2010-09-09'
Description: hwolrd-Web-Server Autoscaled Infra set up .
Parameters:
    VpcId:
        Type: 'AWS::EC2::VPC::Id'
        Description: VpcId of your existing Virtual Private Cloud (VPC)
        Default: vpc-XXXXXXX
        ConstraintDescription: must be the VPC Id of an existing Virtual Private Cloud.
    LSubnet1:
        Type: List<AWS::EC2::Subnet::Id>
        Description: Subnet Id for Subnet using  webserver  subnets here
    KeyName:
        Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
        Type: 'AWS::EC2::KeyPair::KeyName'
        Default: my-test
        ConstraintDescription: must be the name of an existing EC2 KeyPair.
    SSHLocation:
        Description: Lockdown SSH access to the bastion host (default can be accessed from anywhere)
        Type: String
        MinLength: '9'
        MaxLength: '18'
        Default: 1.2.3.4/32
        AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
        ConstraintDescription: must be a valid CIDR range of the form x.x.x.x/x.
    Clustername:
        Description: eks-clsutername must be lower case no special characteres
        Type: String

    InstanceType:
        Description: WebServer EC2 instance type
        Type: String
        Default: t2.micro
        AllowedValues:
            - t1.micro
            - t2.nano
            - t2.micro
            - t2.small
            - t2.medium
            - t2.large
            - m1.small
            - m1.medium
            - m1.large
            - m1.xlarge
            - m2.xlarge
            - m2.2xlarge
            - m2.4xlarge
            - m3.medium
            - m3.large
            - m3.xlarge
            - m3.2xlarge
            - m4.large
            - m4.xlarge
            - m4.2xlarge
            - m4.4xlarge
            - m4.10xlarge
            - c1.medium
            - c1.xlarge
            - c3.large
            - c3.xlarge
            - c3.2xlarge
            - c3.4xlarge
            - c3.8xlarge
            - c4.large
            - c4.xlarge
            - c4.2xlarge
            - c4.4xlarge
            - c4.8xlarge
            - g2.2xlarge
            - g2.8xlarge
            - r3.large
            - r3.xlarge
            - r3.2xlarge
            - r3.4xlarge
            - r3.8xlarge
            - i2.xlarge
            - i2.2xlarge
            - i2.4xlarge
            - i2.8xlarge
            - d2.xlarge
            - d2.2xlarge
            - d2.4xlarge
            - d2.8xlarge
            - hi1.4xlarge
            - hs1.8xlarge
            - cr1.8xlarge
            - cc2.8xlarge
            - cg1.4xlarge
        ConstraintDescription: must be a valid EC2 instance type.
    InstanceMinCount:
        Description: Number of Minimum EC2 instances to launch
        Type: Number
        Default: '1'
    InstanceMaxCount:
        Description: Number of Maximum EC2 instances to launch
        Type: Number
        Default: '1'
    InstanceCount:
        Description: Number of EC2 instances to launch Desired Count (must be </= to min count )
        Type: Number
        Default: '1'
    InstanceImageId:
        Description: AMI id for the node instances. 
        Type: AWS::EC2::Image::Id
        Default: 'ami-0d741ed58ca5b342e'

Resources:
    WebServerGroupv2:
        Type: 'AWS::AutoScaling::AutoScalingGroup'
        Properties:
            VPCZoneIdentifier: !Ref LSubnet1
            LaunchConfigurationName:
                Ref: LaunchConfig
            MinSize: 
                Ref: InstanceMinCount
            MaxSize: 
                Ref: InstanceMaxCount
            HealthCheckType: EC2
            HealthCheckGracePeriod: '300'
            DesiredCapacity:
                Ref: InstanceCount
            Tags:
                - 
                    PropagateAtLaunch: 'true'
                    Value:
                        'Fn::Join':
                            - '-'
                            - 
                                - 
                                    Ref: 'AWS::StackName'
                                - -eks-stack
                    Key: Name
            LoadBalancerNames:
                - 
                    Ref: ElasticLoadBalancer
    LaunchConfig:
        Type: 'AWS::AutoScaling::LaunchConfiguration'
        Properties:
            AssociatePublicIpAddress: 'true'
            ImageId: !Ref InstanceImageId

            SecurityGroups:
                - 
                    Ref: InstanceSecurityGroup
            KeyName:
                Ref: KeyName
            InstanceType:
                Ref: InstanceType
            IamInstanceProfile:  !Ref NodeInstanceProfile
            UserData:
                'Fn::Base64':
                 !Sub |
                    #!/bin/bash -vx
                    exec > >(tee /var/log/userdata.log) 2>&1
                    MID=$(curl http://169.254.169.254/latest/meta-data/instance-id)
                    hostname $MID
                    echo "127.0.0.1      $MID" >>  /etc/hosts

    ElasticLoadBalancer:
        Type: 'AWS::ElasticLoadBalancing::LoadBalancer'
        Properties:
            CrossZone: 'true'
            SecurityGroups:
                - 
                    Ref: LoadBalancerSecurityGroup
            Subnets: !Ref LSubnet1
            ConnectionDrainingPolicy:
                Enabled: true
                Timeout: 120
            Listeners:
                - 
                    LoadBalancerPort: '80'
                    InstancePort: '80'
                    Protocol: HTTP

            HealthCheck:
                Target: 'TCP:80'
                HealthyThreshold: '2'
                UnhealthyThreshold: '9'
                Interval: '10'
                Timeout: '5'
    LoadBalancerSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Enable HTTP access on port 80
            VpcId:
                Ref: VpcId
            SecurityGroupIngress:
                - 
                    IpProtocol: tcp
                    FromPort: '80'
                    ToPort: '80'
                    CidrIp: 0.0.0.0/0
    InstanceSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Enable HTTP access and SSH access
            VpcId:
                Ref: VpcId
            SecurityGroupIngress:
                - 
                    IpProtocol: tcp
                    FromPort: '80'
                    ToPort: '80'
                    SourceSecurityGroupId:
                        Ref: LoadBalancerSecurityGroup
                - 
                    IpProtocol: tcp
                    FromPort: '22'
                    ToPort: '22'
                    CidrIp:
                        Ref: SSHLocation
    ClusterControlPlaneSecurityGroup:
        Type: 'AWS::EC2::SecurityGroup'
        Properties:
            GroupDescription: Cluster control plane sec group
            VpcId:
                Ref: VpcId
    
    hwolrdwebstackscaledownpolicy:
        Type: 'AWS::AutoScaling::ScalingPolicy'
        Properties:
            ScalingAdjustment: -1
            Cooldown: 300
            AutoScalingGroupName:
                Ref: WebServerGroupv2
            AdjustmentType: ChangeInCapacity
    CPUAlarmLow:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            EvaluationPeriods: '10'
            Dimensions:
                - 
                    Name: AutoScalingGroupName
                    Value:
                        Ref: WebServerGroupv2
            AlarmActions:
                - 
                    Ref: hwolrdwebstackscaledownpolicy
            AlarmDescription: Alarm cpu load is  low
            Namespace: AWS/EC2
            Period: '60'
            ComparisonOperator: LessThanThreshold
            Statistic: Average
            Threshold: '35'
            Unit: Percent
            MetricName: CPUUtilization
    hwolrdwebstackscaleuppolicy:
        Type: 'AWS::AutoScaling::ScalingPolicy'
        Properties:
            ScalingAdjustment: 1
            Cooldown: 300
            AutoScalingGroupName:
                Ref: WebServerGroupv2
            AdjustmentType: ChangeInCapacity
    CPUAlarmUP:
        Type: 'AWS::CloudWatch::Alarm'
        Properties:
            EvaluationPeriods: '10'
            Dimensions:
                - 
                    Name: AutoScalingGroupName
                    Value:
                        Ref: WebServerGroupv2
            AlarmActions:
                - 
                    Ref: hwolrdwebstackscaleuppolicy
            AlarmDescription: 'Alarm cpu load is above 90 '
            Namespace: AWS/EC2
            Period: '60'
            ComparisonOperator: GreaterThanThreshold
            Statistic: Average
            Threshold: '90'
            Unit: Percent
            MetricName: CPUUtilization
    
    NodeInstanceProfile:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Path: "/"
        Roles:
        - !Ref NodeInstanceRole

    NodeInstanceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
        Path: "/"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
          - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
          - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly

    eksClusterRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            - Effect: Allow
              Principal:
                Service: eks.amazonaws.com
              Action: sts:AssumeRole
        Path: "/"
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
          - arn:aws:iam::aws:policy/AmazonEKSServicePolicy


    NodeSecurityGroupIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: InstanceSecurityGroup
      Properties:
        Description: Allow node to communicate with each other
        GroupId: !Ref InstanceSecurityGroup
        SourceSecurityGroupId: !Ref InstanceSecurityGroup
        IpProtocol: -1
        FromPort: 0
        ToPort: 65535

    NodeSecurityGroupFromControlPlaneIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: InstanceSecurityGroup
      Properties:
        Description: Allow worker Kubelets and pods to receive communication from the cluster control plane
        GroupId: !Ref InstanceSecurityGroup
        SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
        IpProtocol: tcp
        FromPort: 1025
        ToPort: 65535

    ControlPlaneEgressToNodeSecurityGroup:
      Type: AWS::EC2::SecurityGroupEgress
      DependsOn: InstanceSecurityGroup
      Properties:
        Description: Allow the cluster control plane to communicate with worker Kubelet and pods
        GroupId: !Ref ClusterControlPlaneSecurityGroup
        DestinationSecurityGroupId: !Ref InstanceSecurityGroup
        IpProtocol: tcp
        FromPort: 1025
        ToPort: 65535

    NodeSecurityGroupFromControlPlaneOn443Ingress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: InstanceSecurityGroup
      Properties:
        Description: Allow pods running extension API servers on port 443 to receive communication from cluster control plane
        GroupId: !Ref InstanceSecurityGroup
        SourceSecurityGroupId: !Ref ClusterControlPlaneSecurityGroup
        IpProtocol: tcp
        FromPort: 443
        ToPort: 443

    ControlPlaneEgressToNodeSecurityGroupOn443:
        Type: AWS::EC2::SecurityGroupEgress
        DependsOn: InstanceSecurityGroup
        Properties:
          Description: Allow the cluster control plane to communicate with pods running extension API servers on port 443
          GroupId: !Ref ClusterControlPlaneSecurityGroup
          DestinationSecurityGroupId: !Ref InstanceSecurityGroup
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443

    ClusterControlPlaneSecurityGroupIngress:
        Type: AWS::EC2::SecurityGroupIngress
        DependsOn: InstanceSecurityGroup
        Properties:
          Description: Allow pods to communicate with the cluster API Server
          GroupId: !Ref ClusterControlPlaneSecurityGroup
          SourceSecurityGroupId: !Ref InstanceSecurityGroup
          IpProtocol: tcp
          ToPort: 443
          FromPort: 443

    EKSCluster:
        Type: AWS::EKS::Cluster
        Properties:
          Name: !Ref Clustername
          Version: '1.11'
          RoleArn: !GetAtt eksClusterRole.Arn
          ResourcesVpcConfig:
            SecurityGroupIds:
            - !Ref InstanceSecurityGroup
            SubnetIds: !Ref LSubnet1
Outputs:
    URL:
        Description: URL of the website
        Value:
            'Fn::Join':
                - ''
                - 
                    - 'http://'
                    - 
                        'Fn::GetAtt':
                            - ElasticLoadBalancer
                            - DNSName
